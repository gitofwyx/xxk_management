<ehcache>

    <!-- Sets the path to the directory where cache .data files are created.

         If the path is a Java System Property it is replaced by
         its value in the running VM.

         The following properties are translated:
         user.home - User's home directory
         user.dir - User's current working directory
         java.io.tmpdir - Default temp file path -->
    <diskStore path="java.io.tmpdir"/>


    <!--Default Cache configuration. These will applied to caches programmatically created through
        the CacheManager.

        The following attributes are required for defaultCache:

        maxInMemory       - Sets the maximum number of objects that will be created in memory
        eternal           - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element
                            is never expired.
        timeToIdleSeconds - Sets the time to idle for an element before it expires. Is only used
                            if the element is not eternal. Idle time is now - last accessed time
        timeToLiveSeconds - Sets the time to live for an element before it expires. Is only used
                            if the element is not eternal. TTL is now - creation time
        overflowToDisk    - Sets whether elements can overflow to disk when the in-memory cache
                            has reached the maxInMemory limit.

        -->
    <defaultCache
        maxElementsInMemory="10000"
        eternal="false"
        timeToIdleSeconds="120"
        timeToLiveSeconds="120"
        overflowToDisk="true"
        memoryStoreEvictionPolicy="LFU"
        />

    <!--Predefined caches.  Add your cache configuration settings here.
        If you do not have a configuration for your cache a WARNING will be issued when the
        CacheManager starts

        The following attributes are required for defaultCache:

        name              - Sets the name of the cache. This is used to identify the cache. It must be unique.
        maxInMemory       - Sets the maximum number of objects that will be created in memory
        eternal           - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element
                            is never expired.
        timeToIdleSeconds - Sets the time to idle for an element before it expires. Is only used
                            if the element is not eternal. Idle time is now - last accessed time
        timeToLiveSeconds - Sets the time to live for an element before it expires. Is only used
                            if the element is not eternal. TTL is now - creation time
        overflowToDisk    - Sets whether elements can overflow to disk when the in-memory cache
                            has reached the maxInMemory limit.

        -->

    <!-- Sample cache named sampleCache1
        This cache contains a maximum in memory of 10000 elements, and will expire
        an element if it is idle for more than 5 minutes and lives for more than
        10 minutes.

        If there are more than 10000 elements it will overflow to the
        disk cache, which in this configuration will go to wherever java.io.tmp is
        defined on your system. On a standard Linux system this will be /tmp"
        -->
    <cache name="sampleCache1"
        maxElementsInMemory="10000"
        eternal="false"
        timeToIdleSeconds="0"
        timeToLiveSeconds="0"
        overflowToDisk="false"
        memoryStoreEvictionPolicy="LRU"
        />

    <!-- Sample cache named sampleCache2
        This cache contains 1000 elements. Elements will always be held in memory.
        They are not expired. -->
    <!--<cache name="sampleCache2"
        maxElementsInMemory="1000"
        eternal="false"
        timeToIdleSeconds="0"
        timeToLiveSeconds="0"
        overflowToDisk="false"
        />-->

    <!-- Place configuration for your caches following -->
	
	<!-- 授权缓存 -->
    <cache name="authenticationCache"
           maxEntriesLocalHeap="2000"
           eternal="false"
           timeToIdleSeconds="3600"
           timeToLiveSeconds="0"
           overflowToDisk="false"
           statistics="true">
    </cache>
    <!-- 认证缓存 -->
    <cache name="authorizationCache"
           maxEntriesLocalHeap="2000"
           eternal="false"
           timeToIdleSeconds="3600"
           timeToLiveSeconds="0"
           overflowToDisk="false"
           statistics="true">
    </cache>

    <!--默认缓存配置，以下属性是必须的：
            name ：cache的标识符，在一个CacheManager中必须唯一。
            maxElementsInMemory：内存缓存中最多可以存放的元素数量,若放入Cache中的元素超过这个数值,则有以下两种情况。
                                1)若overflowToDisk=true,则会将Cache中多出的元素放入磁盘文件中。
                                2)若overflowToDisk=false,则根据memoryStoreEvictionPolicy策略替换Cache中原有的元素。
            maxElementsOnDisk ： 在磁盘上缓存的element的最大数目。
            eternal ： 设定缓存的elements是否有有效期。如果为true，timeouts属性被忽略。
            overflowToDisk ： 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上。
            以下属性是可选的：
            timeToIdleSeconds ： 缓存element在过期前的空闲时间[缓存数据在失效前的允许闲置时间(单位:秒),
                                 仅当eternal=false时使用,默认值是0表示可闲置时间无穷大,此为可选属性即访
                                 问这个cache中元素的最大间隔时间,若超过这个时间没有访问此Cache中的某个
                                 元素,那么此元素将被从Cache中清除]。
            timeToLiveSeconds ： 缓存element的有效生命期[缓存数据在失效前的允许存活时间(单位:秒),仅当
                                 eternal=false时使用,默认值是0表示可存活时间无穷大，即Cache中的某元素
                                 从创建到清楚的生存时间,也就是说从创建开始计时,当超过这个时间时,此元素
                                 将从Cache中清除]。
            diskPersistent ： 在VM重启的时候是否持久化磁盘缓存，默认是false。
            diskExpiryThreadIntervalSeconds ： 磁盘缓存的清理线程运行间隔，默认是120秒.
            memoryStoreEvictionPolicy ： 当内存缓存达到最大，有新的element加入的时候，
            移除缓存中element的策略。默认是LRU，可选的有LFU和FIFO
            缓存子元素：
            cacheEventListenerFactory：注册相应的的缓存监听类，用于处理缓存事件，如put,remove,update,和expire
            bootstrapCacheLoaderFactory:指定相应的BootstrapCacheLoader，用于在初始化缓存，以及自动设置。
    -->

    <!--
        LRU:LRU是Least Recently Used 的缩写 LRU缓存把最近最少使用的数据移除，让给最新读取的数据。而往往最常读取的，也是读取次数最多的，所以，利用LRU缓存，我们能够提高系统的performance(性能)
        LFU是最近最不常用页面置换算法(Least Frequently Used),也就是淘汰一定时期内被访问次数最少的页!
        FIFO(First In First Out ，先进先出)
      算法是根据先进先出原理来淘汰数据的，实现上是最简单的一种,具体算法如下：
      1. 新访问的数据插入FIFO队列尾部，数据在FIFO队列中顺序移动；
      2. 淘汰FIFO队列头部的数据；
     -->

</ehcache>
